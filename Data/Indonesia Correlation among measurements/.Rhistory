weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
pick_central('Indicator 1.1.1.csv')
pick_central('Indicator 1.1.1.csv')
pick_central('Indicator 1.1.1.csv')
return(measureID)
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
# import measure matrix
init_matrix <- read.csv('Indicator 1.1.1.csv', header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
# look at graph
# plot(g, edge.width = 0.5)
# import attribute file
# att <- read.csv("Indicator "+ i + ".csv",header=TRUE,row.names=NULL,check.names=FALSE)
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
att <- read.csv('Attribute 1.1.1.csv',header=TRUE,row.names=NULL,check.names=FALSE)
att <- att[-1]
att$id <- seq.int(nrow(att))
# attach the attributes to the Vertices of the igraph
vertex_attr(g, index = att$id) <- att
pick_central('Indicator 1.1.1.csv')
library(igraph)
library(dplyr)
library(plyr)
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
matrix_file <- "Indicator 1.1.1.csv"
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$UniqueID,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
matrix_file <- "Indicator 1.1.1.csv"
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$UniqueID,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
df <- data.frame(ID = V(g)$UniqueID,
weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
df <- data.frame(ID = V(g)$UniqueID,
weighted_degree = graph.strength(g))
df <- data.frame(degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
.
df <- data.frame(degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
V(g)$UniqueID
summary(g)
V(g)$name
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
measureID
return(measureID)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g),
btwn = betweenness(g, directed = FALSE),
close = closeness(g),
eigen = evcent(g),
bon = bonpow(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
}
pick_central('Indicator 1.1.1.csv')
mydir <- readline(prompt="Path: ")
corfiles = list.files(path = mydir, pattern="Indicator. *.csv", full.names=TRUE)
measureIDs <- c()
for (filename in corfiles) {
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
measureID
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
mydir <- "Indonesia Correlation among measurements"
# mydir <- readline(prompt="Path: ")
corfiles = list.files(path = mydir, pattern="Indicator. *.csv", full.names=TRUE)
setwd("/Users/hailey/G5055_Practicum_Project2/Data")
mydir = "Indonesia Correlation among measurements"
attfiles = list.files(path = mydir, pattern="Attribute.*.csv", full.names=TRUE)
attfiles = list.files(path = mydir, pattern="*.csv", full.names=TRUE)
attfiles = list.files(path = mydir, pattern="*.csv", full.names=TRUE)
mydir
# mydir <- readline(prompt="Path: ")
corfiles = list.files(path = "mydir", pattern="Indicator. *.csv", full.names=TRUE)
mydir <- readline(prompt="Path: ")
corfiles = list.files(path = mydir, pattern="Indicator. *.csv", full.names=TRUE)
measureIDs <- c()
for (filename in corfiles) {
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
measureID
mydir
mydir <- readline(prompt="Path: ")
corfiles = list.files(path = mydir, pattern="Indicator. *.csv", full.names=TRUE)
mydir
corfiles = list.files(path = Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements/Indonesia Correlation among measurements, pattern="Indicator. *.csv", full.names=TRUE)
corfiles = list.files(path = "Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements/Indonesia Correlation among measurements", pattern="Indicator. *.csv", full.names=TRUE)
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
mydir <- readline(prompt="Path: ")
corfiles = list.files(path = "", pattern="Indicator. *.csv", full.names=TRUE)
corfiles = list.files(path = mydir, pattern="Indicator. *.csv", full.names=TRUE)
mydir
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
mydir <- "Indonesia Correlation among measurements"
corfiles = list.files(path = mydir, pattern="Indicator. *.csv", full.names=TRUE)
?list.files
setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
temp = list.files(pattern="*.csv")
corfiles = list.files(path = mydir, pattern="Indicator.*.csv", full.names=TRUE)
temp = list.files(pattern="Indicator. *.csv")
temp = list.files(pattern="*.csv")
temp = list.files(pattern="I *.csv")
temp = list.files(pattern="I.*.csv")
temp = list.files(pattern="Indicator.*.csv")
corfiles = list.files(path = mydir, pattern="Indicator.*.csv", full.names=TRUE)
corfiles = list.files(pattern="Indicator.*.csv", full.names=TRUE)
?readline
measureIDs <- c()
country <- readline(prompt="Country: ")
mydir <- "Data/" + country+" Correlation among measurements"
?paste
mydir <-paste("Data/" + country + " Correlation among measurements")
mydir <-paste("Data/", country," Correlation among measurements")
mydir <-paste("Data/",country, " Correlation among measurements")
corfiles = list.files(pattern="Indicator.*.csv", full.names=TRUE)
measureIDs <- c()
# call function
for (filename in corfiles) {
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
}
library(igraph)
library(dplyr)
library(plyr)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
}
# pick_central('Indicator 1.1.1.csv')
# setwd("/Users/hailey/G5055_Practicum_Project2/Data/Indonesia Correlation among measurements")
# mydir <- "Indonesia Correlation among measurements"
country <- readline(prompt="Country: ")
corfiles = list.files(pattern="Indicator.*.csv", full.names=TRUE)
# attfiles = list.files(path = mydir, pattern="Attribute.*.csv", full.names=TRUE)
measureIDs <- c()
# call function
for (filename in corfiles) {
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
# list of central variables
measureID
library(igraph)
library(dplyr)
library(plyr)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
}
country <- readline(prompt="Country: ")
library(igraph)
library(dplyr)
library(plyr)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
}
country <- readline(prompt="Country: ")
mydir <-paste("Data/",country, " Correlation among measurements")
corfiles = list.files(pattern="Indicator.*.csv", full.names=TRUE)
measureIDs <- c()
# call function
for (filename in corfiles) {
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
# list of central variables
measureID
# call function
for (filename in corfiles) {
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
# list of central variables
measureIDs
print(filename)
for (filename in corfiles) {
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
# list of central variables
measureIDs
print(filename)
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
# call function
for (filename in corfiles) {
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
# list of central variables
measureIDs
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
return(measureID)
}
country <- readline(prompt="Country: ")
corfiles = list.files(pattern="Indicator.*.csv", full.names=TRUE)
measureIDs <- c()
# call function
for (filename in corfiles) {
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
measureIDs <- list()
# call function
for (filename in corfiles) {
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
# list of central variables
measureIDs
View(measureIDs)
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, filename)
# call function
for (filename in corfiles) {
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, filename)
}
# list of central variables
measureIDs
measureID
country <- readline(prompt="Country: ")
library(dplyr)
library(plyr)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
measureID
}
country <- readline(prompt="Country: ")
corfiles = list.files(pattern="Indicator.*.csv", full.names=TRUE)
# attfiles = list.files(path = mydir, pattern="Attribute.*.csv", full.names=TRUE)
measureIDs <- list()
# call function
for (filename in corfiles) {
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, filename)
}
# list of central variables
measureIDs
library(igraph)
library(dplyr)
library(plyr)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
measureID
}
country <- readline(prompt="Country: ")
corfiles = list.files(pattern="Indicator.*.csv", full.names=TRUE)
# attfiles = list.files(path = mydir, pattern="Attribute.*.csv", full.names=TRUE)
measureIDs <- list()
# call function
for (filename in corfiles) {
print(filename)
pick_central(filename)
measureIDs <- append(measureIDs, measureID)
}
# list of central variables
measureIDs
result <- vector("list",49)
for (i in 1:49)
{
result[[i]] <- T1>F[i] # I used print to see the results in the screen
}
#Print the first matrix on screen
result[[1]]
measureIDs <- lapply(filename, pick_central(filename))
measureIDs <- lapply(filename, pick_central())
?lapply
measureIDs <- sapply(list(filename), pick_central())
typeof(filename)
typeof(corfiles)
as.list(corfiles)
measureIDs <- sapply(as.list(corfiles), pick_central())
measureIDs <- sapply(as.list(corfiles), pick_central
measureIDs <- sapply(as.list(corfiles), pick_central)
measureIDs <- sapply(as.list(corfiles), pick_central)
measureIDs <- sapply(as.list(corfiles), pick_central)
measureIDs
# list of central variables
measureIDs <- sapply(as.list(corfiles), pick_central)
measureIDs
---
title: "Pick Central"
author: "Qinyue Hao"
date: "10/8/2021"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
```
```{r libraries}
library(igraph)
library(dplyr)
library(plyr)
```
```{r define function}
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
measureID
}
```
```{r set path}
country <- readline(prompt="Country: ")
corfiles = list.files(mydir, pattern="Indicator.*.csv", full.names=TRUE)
```
```{r list of central variables}
measureIDs <- sapply(as.list(corfiles), pick_central)
measureIDs
```
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(igraph)
library(dplyr)
library(plyr)
pick_central <- function(matrix_file) {
# import measure matrix
init_matrix <- read.csv(matrix_file, header=TRUE, row.names=1, check.names=FALSE, na.strings = "")
# set missing values to 0
init_matrix[is.na(init_matrix)] <- 0
# prepare matrix for graph
matrix <- as.matrix(init_matrix)
diag(matrix) <- 0
g <- graph_from_adjacency_matrix(matrix, mode = "undirected", weighted = TRUE)
df <- data.frame(ID = V(g)$name,
degree = degree(g, loops = FALSE),
weighted_degree = graph.strength(g))
measureID <- df[, c(1,3)] %>% arrange(desc(weighted_degree)) %>% head(1)[1]
measureID
}
country <- readline(prompt="Country: ")
mydir <-paste("Data/",country, " Correlation among measurements")
corfiles = list.files(mydir, pattern="Indicator.*.csv", full.names=TRUE)
measureIDs <- sapply(as.list(corfiles), pick_central)
measureIDs
