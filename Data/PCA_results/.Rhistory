library(readr)
# load data and keep only the node pairs that are related----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
d <- read_csv("indo_coefficients.csv")
# build an unweighted network base (cutoff score = 0.5)----
el <- d %>%
filter(Var1 != Var2) %>%
filter(value >= 0.5) %>%
select(Var1, Var2)
# ...with some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# information: goal, target, indicator
att <- info[3:5] %>%
unique() %>%
filter(Indicator %in% unique(append(el$Var1, el$Var2)))
library(igraph)
library(dplyr)
library(readr)
# load data and keep only the node pairs that are related----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
d <- read_csv("indo_coefficients.csv")
# build an unweighted network base (cutoff score = 0.5)----
el <- d %>%
filter(Var1 != Var2) %>%
filter(value >= 0.5) %>%
select(Var1, Var2)
# ...with some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# information: goal, target, indicator
att <- info[3:5] %>%
unique() %>%
filter(Indicator %in% unique(append(el$Var1, el$Var2)))
node <- att[,c(3,1,2)]
g <- graph.edgelist(as.matrix(el), directed = FALSE)
# add all the attributes to the vertex----
vertex_attr(g, index = att$Indicator) <- att
V(g)$name <- V(g)$Indicator
# calculate network variables: degree and several kinds of centrality score----
netatt <- data.frame(Indicator = V(g)$Indicator,
degree = degree(g), # number of neighbors # numerically equal to degree centrality
btwn = betweenness(g, directed = F), # betweenness centrality
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
eigen = evcent(g) # eigenvector centrality
)[1:5]
# information: goal, target, indicator
att <- info[3:5] %>%
unique() %>%
filter(Indicator %in% unique(append(el$Var1, el$Var2)))
node <- att[,c(3,1,2)]
g <- graph.edgelist(as.matrix(el), directed = FALSE)
# add all the attributes to the vertex----
vertex_attr(g, index = att$Indicator) <- att
V(g)$name <- V(g)$Indicator
# calculate network variables: degree and several kinds of centrality score----
netatt <- data.frame(Indicator = V(g)$Indicator,
degree = degree(g), # number of neighbors # numerically equal to degree centrality
btwn = betweenness(g, directed = F), # betweenness centrality
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
eigen = evcent(g) # eigenvector centrality
)[1:5]
# merge the network attributes with attributes from other data source----
att <- merge(att, netatt, by='Indicator')
# rename for later analysis with text network----
catt <- att
cd <- d
cel <- el
cg <- g
# save attribute table----
write_csv(catt, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_attributes.csv")
#
# save network object in RData format----
save(cd, cel,cg, catt, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net.RData")
# To load the data again
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net.RData")
# ------------------------------------------------------------------
# build a weighted network base (edge weight = coefficient)----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
matrix_d <- read_csv("indo_coefficients_matrix.csv") # adjacency matrix
matrix_d <- matrix_d[-1]
m <- as.matrix(matrix_d)
m
# m <- abs(m) # if you want to keep only the absolute value of coefficients
rownames(m) <- colnames(matrix_d)
g2 <- graph_from_adjacency_matrix(m, mode = "undirected", weighted = TRUE)
# repeat for the weighted network g2----
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# information: goal, target, indicator
att2 <- info[3:5] %>%
unique() %>%
filter(Indicator %in% unique(append(el$Var1, el$Var2)))
# add all the attributes to the vertex----
vertex_attr(g2, index = att2$Indicator) <- att2  #### Error in as.igraph.vs(graph, index) : Invalid vertex names
# ------------------------------------------------------------------
# build a weighted network base (edge weight = coefficient)----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
matrix_d <- read_csv("indo_coefficients_matrix.csv") # adjacency matrix
matrix_d <- matrix_d[-1]
m <- as.matrix(matrix_d)
m
# m <- abs(m) # if you want to keep only the absolute value of coefficients
rownames(m) <- colnames(matrix_d)
g2 <- graph_from_adjacency_matrix(m, mode = "undirected", weighted = TRUE)
# repeat for the weighted network g2----
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
View(matrix_d)
View(m)
m
# m <- abs(m) # if you want to keep only the absolute value of coefficients
rownames(m) <- colnames(matrix_d)
g2 <- graph_from_adjacency_matrix(m, mode = "undirected", weighted = TRUE)
# repeat for the weighted network g2----
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# information: goal, target, indicator
att2 <- info[3:5] %>%
unique() %>%
filter(Indicator %in% unique(append(el$Var1, el$Var2)))
# information: goal, target, indicator
att2 <- info[3:5] %>%
unique() %>%
filter(Indicator %in% colnames(matrix_d))
# add all the attributes to the vertex----
vertex_attr(g2, index = att2$Indicator) <- att2  #### Error in as.igraph.vs(graph, index) : Invalid vertex names
V(g2)$name <- V(g2)$Indicator
# inspect the vertexes(nodes) in the network----
vertex_attr(g2)
# width and sign of ties----
E(g2)$width <- abs(E(g2)$weight)
E(g2)$positive <- ifelse(E(g2)$weight > 0, TRUE, FALSE)
edge_attr(g2)
# calculate network variables: degree and several kinds of centrality score----
netatt2 <- data.frame(Indicator = V(g2)$Indicator,
degree = degree(g2), # number of neighbors # numerically equal to degree centrality # here meaningless
strength = strength(g2) # sum of the edge weights of the adjacent edges for each vertex # weight here should be absolute value # somehow it's giving all NAs
# btwn = betweenness(g2, directed = F), # betweenness centrality # DON'T RUN IT!!! r session aborts
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
# eigen = evcent(g2) # eigenvector centrality # all very high, not much help
)
# merge the network attributes with attributes from other data source----
att2 <- merge(att2, netatt2, by='Indicator')
# rename for later analysis with text network----
cmatrix_d <- matrix_d
cm <- m
catt2 <- att2
cg2 <- g2
# save attribute table----
write_csv(catt, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_weighted_attributes.csv")
# save network object in RData format----
save(cmatrix_d, cm, cg2, catt2, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/coefficient_net_weighted.RData")
# To load the data again
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/coefficient_net_weighted.RData")
# ------------------------------------------------------------------
# build a weighted network base (edge weight = coefficient)----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
matrix_d <- read_csv("gua_coefficients_matrix.csv") # adjacency matrix
matrix_d <- matrix_d[-1]
m <- as.matrix(matrix_d)
m
# m <- abs(m) # if you want to keep only the absolute value of coefficients
rownames(m) <- colnames(matrix_d)
g2 <- graph_from_adjacency_matrix(m, mode = "undirected", weighted = TRUE)
# repeat for the weighted network g2----
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedGuate.csv")
# information: goal, target, indicator
att2 <- info[3:5] %>%
unique() %>%
filter(Indicator %in% colnames(matrix_d))
# add all the attributes to the vertex----
vertex_attr(g2, index = att2$Indicator) <- att2  #### Error in as.igraph.vs(graph, index) : Invalid vertex names
V(g2)$name <- V(g2)$Indicator
# inspect the vertexes(nodes) in the network----
vertex_attr(g2)
# width and sign of ties----
E(g2)$width <- abs(E(g2)$weight)
E(g2)$positive <- ifelse(E(g2)$weight > 0, TRUE, FALSE)
edge_attr(g2)
# calculate network variables: degree and several kinds of centrality score----
netatt2 <- data.frame(Indicator = V(g2)$Indicator,
degree = degree(g2), # number of neighbors # numerically equal to degree centrality # here meaningless
strength = strength(g2) # sum of the edge weights of the adjacent edges for each vertex # weight here should be absolute value # somehow it's giving all NAs
# btwn = betweenness(g2, directed = F), # betweenness centrality # DON'T RUN IT!!! r session aborts
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
# eigen = evcent(g2) # eigenvector centrality # all very high, not much help
)
# merge the network attributes with attributes from other data source----
att2 <- merge(att2, netatt2, by='Indicator')
# rename for later analysis with text network----
cmatrix_d <- matrix_d
cm <- m
catt2 <- att2
cg2 <- g2
# save attribute table----
write_csv(catt, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_weighted_attributes.csv")
# save network object in RData format----
save(cmatrix_d, cm, cg2, catt2, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
# save attribute table----
write_csv(catt2, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_weighted_attributes.csv")
# save network object in RData format----
save(cmatrix_d, cm, cg2, catt2, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
# To load the data again
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
# ------------------------------------------------------------------
# build a weighted network base (edge weight = coefficient)----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
# ------------------------------------------------------------------
# build a weighted network base (edge weight = coefficient)----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
matrix_d <- read_csv("gua_coefficients_matrix.csv") # adjacency matrix
matrix_d <- matrix_d[-1]
m <- as.matrix(matrix_d)
m
# m <- abs(m) # if you want to keep only the absolute value of coefficients
rownames(m) <- colnames(matrix_d)
g2 <- graph_from_adjacency_matrix(m, mode = "undirected", weighted = TRUE)
# repeat for the weighted network g2----
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedGuate.csv")
# information: goal, target, indicator
att2 <- info[3:5] %>%
unique() %>%
filter(Indicator %in% colnames(matrix_d))
# add all the attributes to the vertex----
vertex_attr(g2, index = att2$Indicator) <- att2  #### Error in as.igraph.vs(graph, index) : Invalid vertex names
V(g2)$name <- V(g2)$Indicator
# inspect the vertexes(nodes) in the network----
vertex_attr(g2)
# width and sign of ties----
E(g2)$width <- abs(E(g2)$weight)
E(g2)$positive <- ifelse(E(g2)$weight > 0, TRUE, FALSE)
edge_attr(g2)
# calculate network variables: degree and several kinds of centrality score----
netatt2 <- data.frame(Indicator = V(g2)$Indicator,
degree = degree(g2), # number of neighbors # numerically equal to degree centrality # here meaningless
strength = strength(g2) # sum of the edge weights of the adjacent edges for each vertex # weight here should be absolute value # somehow it's giving all NAs
# btwn = betweenness(g2, directed = F), # betweenness centrality # DON'T RUN IT!!! r session aborts
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
# eigen = evcent(g2) # eigenvector centrality # all very high, not much help
)
# merge the network attributes with attributes from other data source----
att2 <- merge(att2, netatt2, by='Indicator')
# rename for later analysis with text network----
cmatrix_d <- matrix_d
cm <- m
catt2 <- att2
cg2 <- g2
# save attribute table----
write_csv(catt2, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_weighted_attributes.csv")
# save network object in RData format----
save(cmatrix_d, cm, cg2, catt2, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
# To load the data again
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
# ------------------------------------------------------------------
# build a weighted network base (edge weight = coefficient)----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
matrix_d <- read_csv("indo_coefficients_matrix.csv") # adjacency matrix
matrix_d <- matrix_d[-1]
m <- as.matrix(matrix_d)
m
# m <- abs(m) # if you want to keep only the absolute value of coefficients
rownames(m) <- colnames(matrix_d)
g2 <- graph_from_adjacency_matrix(m, mode = "undirected", weighted = TRUE)
# repeat for the weighted network g2----
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# information: goal, target, indicator
att2 <- info[3:5] %>%
unique() %>%
filter(Indicator %in% colnames(matrix_d))
# add all the attributes to the vertex----
vertex_attr(g2, index = att2$Indicator) <- att2  #### Error in as.igraph.vs(graph, index) : Invalid vertex names
V(g2)$name <- V(g2)$Indicator
# inspect the vertexes(nodes) in the network----
vertex_attr(g2)
# width and sign of ties----
E(g2)$width <- abs(E(g2)$weight)
E(g2)$positive <- ifelse(E(g2)$weight > 0, TRUE, FALSE)
edge_attr(g2)
# calculate network variables: degree and several kinds of centrality score----
netatt2 <- data.frame(Indicator = V(g2)$Indicator,
degree = degree(g2), # number of neighbors # numerically equal to degree centrality # here meaningless
strength = strength(g2) # sum of the edge weights of the adjacent edges for each vertex # weight here should be absolute value # somehow it's giving all NAs
# btwn = betweenness(g2, directed = F), # betweenness centrality # DON'T RUN IT!!! r session aborts
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
# eigen = evcent(g2) # eigenvector centrality # all very high, not much help
)
# merge the network attributes with attributes from other data source----
att2 <- merge(att2, netatt2, by='Indicator')
# rename for later analysis with text network----
cmatrix_d <- matrix_d
cm <- m
catt2 <- att2
cg2 <- g2
# save attribute table----
write_csv(catt2, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_weighted_attributes.csv")
# save network object in RData format----
save(cmatrix_d, cm, cg2, catt2, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net_weighted.RData")
# To load the data again
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net_weighted.RData")
# 1. coefficient matrix
# Indonesia coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results/indo_coefficient_matrix.RData")
indo_cm <- x
library(network)
library(sna)
library(dplyr)
# 1. coefficient matrix
# Indonesia coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results/indo_coefficient_matrix.RData")
indo_cm <- x
# Guatemala coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results/gua_coefficient_matrix.RData")
gua_cm <- x
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
## 1. QAP between text similarity and correlation coefficients
### Use the original value of similarity scores in text network and correlation coefficients in Indictor networks, to see:  How much the similarity between Indicator descriptions predict the correlation coefficient between their measurements?
### 1) Indonesia
```{r}
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_tc <- netlm(indo_tm, indo_cm)
indo_nl_tc <- netlm(indo_tm, indo_cm)
summary(indo_nl_tc)
library(network)
library(sna)
library(dplyr)
library(network)
library(sna)
library(dplyr)
**We need to admit: caveats of statistical inference with networks:**
In networks: Non-independence of observations
The inference problem: The non-independence of observations affects the standard errors, not the coefficients.
To relieve this problem, we adjust standard errors by permuting rows and columns in the matrix, while maintaining the underlying relationship. -- QAP
**QAP – the Quadratic Assignment Procedure** - https://www.stata.com/meeting/1nasug/simpson.pdf
# Part 1: real number matrices
```{r}
# 1. coefficient matrix
# Indonesia coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net_weighted.RData")
indo_cm <- cm
# Guatemala coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
gua_cm <- cm
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
View(tm)
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
## 1. QAP between text similarity and correlation coefficients
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_tc <- netlm(indo_tm, indo_cm)
summary(indo_nl_tc)
# indo_nl_ct <- netlm(indo_cm, indo_tm)
# summary(indo_nl_ct)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
gua_tm <- tm[rownames(gua_cm), rownames(gua_cm)]
# install.packages("sna")
library(sna)
gua_nl_tc <- netlm(gua_tm, gua_cm)
summary(gua_nl_tc)
# gua_nl_ct <- netlm(gua_tm, gua_cm)
# summary(gua_nl_ct)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
diff1 <- setdiff(rownames(indo_cm), rownames(gua_cm))
common_for_qap <- setdiff(rownames(indo_cm), diff1)
# diff2 <- setdiff(rownames(gua_cm), rownames(indo_cm))
# common_for_qap <- setdiff(rownames(gua_cm), diff2) # same result 87 common indicators
indo_cm2 <- indo_cm[common_for_qap, common_for_qap]
gua_cm2 <- gua_cm[common_for_qap, common_for_qap]
nl_2country <- netlm(indo_cm2, gua_cm2)
summary(nl_2country)
# nl_2country2 <- netlm(gua_cm2, indo_cm2)
# summary(nl_2country2)
sqrt(0.0005801)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
gua_tm <- tm[rownames(gua_cm), rownames(gua_cm)]
# install.packages("sna")
library(sna)
# gua_nl_tc <- netlm(gua_tm, gua_cm)
# summary(gua_nl_tc)
gua_nl_ct <- netlm(gua_cm, gua_tm)
summary(gua_nl_ct)
sqrt(0.007584)
diff1 <- setdiff(rownames(indo_cm), rownames(gua_cm))
common_for_qap <- setdiff(rownames(indo_cm), diff1)
# diff2 <- setdiff(rownames(gua_cm), rownames(indo_cm))
# common_for_qap <- setdiff(rownames(gua_cm), diff2) # same result 87 common indicators
indo_cm2 <- indo_cm[common_for_qap, common_for_qap]
gua_cm2 <- gua_cm[common_for_qap, common_for_qap]
nl_2country <- netlm(indo_cm2, gua_cm2)
summary(nl_2country)
# nl_2country2 <- netlm(gua_cm2, indo_cm2)
# summary(nl_2country2)
sqrt(0.0001961)
# 1. coefficient matrix
# Indonesia coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results/indo_coefficient_matrix.RData")
indo_cm <- x
# Guatemala coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results/gua_coefficient_matrix.RData")
gua_cm <- x
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
indo_cm[indo_cm >= -0.5 & indo_cm < 0.5] <- 0
indo_cm[indo_cm <= -0.5 | indo_cm >= 0.5] <- 1
gua_cm[gua_cm >= -0.5 & gua_cm < 0.5] <- 0
gua_cm[gua_cm <= -0.5 | gua_cm >= 0.5] <- 1
tm[tm < 0.2] <- 0
tm[tm >= 0.2] <- 1
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
# 1. coefficient matrix
# Indonesia coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net_weighted.RData")
indo_cm <- cm
# Guatemala coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
gua_cm <- cm
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
indo_cm[indo_cm >= -0.5 & indo_cm < 0.5] <- 0
indo_cm[indo_cm <= -0.5 | indo_cm >= 0.5] <- 1
gua_cm[gua_cm >= -0.5 & gua_cm < 0.5] <- 0
gua_cm[gua_cm <= -0.5 | gua_cm >= 0.5] <- 1
tm[tm < 0.2] <- 0
tm[tm >= 0.2] <- 1
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
sqrt(0.0005522)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
gua_tm <- tm[rownames(gua_cm), rownames(gua_cm)]
# install.packages("sna")
library(sna)
gua_nl_tc <- netlm(gua_tm, gua_cm)
summary(gua_nl_tc)
gua_nl_ct <- netlm(gua_tm, gua_cm)
summary(gua_nl_ct)
gua_nlo_ct <- netlogit(gua_cm, gua_tm)
summary(gua_nlo_ct)
sqrt(0.0005318)
diff1 <- setdiff(rownames(indo_cm), rownames(gua_cm))
common_for_qap <- setdiff(rownames(indo_cm), diff1)
# diff2 <- setdiff(rownames(gua_cm), rownames(indo_cm))
# common_for_qap <- setdiff(rownames(gua_cm), diff2) # same result 87 common indicators
indo_cm2 <- indo_cm[common_for_qap, common_for_qap]
gua_cm2 <- gua_cm[common_for_qap, common_for_qap]
nl_2country <- netlm(indo_cm2, gua_cm2)
summary(nl_2country)
# nl_2country2 <- netlm(gua_cm2, indo_cm2)
# summary(nl_2country2)
nlo_2country <- netlogit(indo_cm2, gua_cm2)
summary(nlo_2country)
nlo_2country <- netlogit(indo_cm2, gua_cm2)
summary(nlo_2country)
tm2 <- tm[colnames(indo_cm2), colnames(indo_cm2)]
cm_tm <- array(NA, c(2, length(gua_cm2[1,]),length(gua_cm2[1,])))
myxs[1,,] <- gua_cm2
tm2 <- tm[colnames(guq_cm2), colnames(gua_cm2)]
tm2 <- tm[colnames(gua_cm2), colnames(gua_cm2)]
cm_tm <- array(NA, c(2, length(gua_cm2[1,]),length(gua_cm2[1,])))
cm_tm[1,,] <- gua_cm2
cm_tm[2,,] <- tm2
tm2 <- tm[colnames(gua_cm2), colnames(gua_cm2)] # colnames(indo_cm2) and colnames(gua_cm2) are the same
cm_tm <- array(NA, c(2, length(gua_cm2[1,]),length(gua_cm2[1,])))
cm_tm[1,,] <- gua_cm2
cm_tm[2,,] <- tm2
n2<-netlm(indo_cm2, cm_tm)
n2<-netlm(indo_cm2, cm_tm)
summary(n2)
