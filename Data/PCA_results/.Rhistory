load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
gua_cm <- cm
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
indo_cm[indo_cm >= -0.5 & indo_cm < 0.5] <- 0
indo_cm[indo_cm <= -0.5 | indo_cm >= 0.5] <- 1
gua_cm[gua_cm >= -0.5 & gua_cm < 0.5] <- 0
gua_cm[gua_cm <= -0.5 | gua_cm >= 0.5] <- 1
tm[tm < 0.2] <- 0
tm[tm >= 0.2] <- 1
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
indo_nlo_ct <- netlogit(indo_cm, indo_tm, test.statistic = "z-value")
summary(indo_nlo_ct)
indo_nlo_ct <- netlogit(indo_cm, indo_tm)
summary(indo_nlo_ct)
indo_nlo_ct <- netlogit(indo_cm, indo_tm, test.statistic = "beta")
summary(indo_nlo_ct)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
tm2 <- tm[colnames(gua_cm2), colnames(gua_cm2)] # colnames(indo_cm2) and colnames(gua_cm2) are the same
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
gua_tm <- tm[rownames(gua_cm), rownames(gua_cm)]
# install.packages("sna")
library(sna)
gua_nl_tc <- netlm(gua_tm, gua_cm)
summary(gua_nl_tc)
# gua_nl_ct <- netlm(gua_cm, gua_tm)
# summary(gua_nl_ct)
gua_nlo_ct <- netlogit(gua_cm, gua_tm)
summary(gua_nlo_ct)
gua_nlo_ct <- netlogit(gua_cm, gua_tm)
summary(gua_nlo_ct)
indo_nlo_ct <- netlogit(indo_cm, indo_tm)
summary(indo_nlo_ct)
indo_nlo_ct <- netlogit(indo_cm, indo_tm)
summary(indo_nlo_ct)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
gua_tm <- tm[rownames(gua_cm), rownames(gua_cm)]
# install.packages("sna")
library(sna)
gua_nl_tc <- netlm(gua_tm, gua_cm)
summary(gua_nl_tc)
# gua_nl_ct <- netlm(gua_cm, gua_tm)
# summary(gua_nl_ct)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(network)
library(sna)
library(dplyr)
# 1. coefficient matrix
# Indonesia coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net_weighted.RData")
indo_cm <- cm
# Guatemala coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
gua_cm <- cm
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
indo_cm[indo_cm >= -0.5 & indo_cm < 0.5] <- 0
indo_cm[indo_cm <= -0.5 | indo_cm >= 0.5] <- 1
gua_cm[gua_cm >= -0.5 & gua_cm < 0.5] <- 0
gua_cm[gua_cm <= -0.5 | gua_cm >= 0.5] <- 1
tm[tm < 0.2] <- 0
tm[tm >= 0.2] <- 1
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
indo_nlo_ct <- netlogit(indo_cm, indo_tm)
summary(indo_nlo_ct)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
gua_tm <- tm[rownames(gua_cm), rownames(gua_cm)]
# install.packages("sna")
library(sna)
gua_nl_tc <- netlm(gua_tm, gua_cm)
summary(gua_nl_tc)
# gua_nl_ct <- netlm(gua_cm, gua_tm)
# summary(gua_nl_ct)
gua_nlo_ct <- netlogit(gua_cm, gua_tm)
summary(gua_nlo_ct)
diff1 <- setdiff(rownames(indo_cm), rownames(gua_cm))
common_for_qap <- setdiff(rownames(indo_cm), diff1)
# diff2 <- setdiff(rownames(gua_cm), rownames(indo_cm))
# common_for_qap <- setdiff(rownames(gua_cm), diff2) # same result 87 common indicators
indo_cm2 <- indo_cm[common_for_qap, common_for_qap]
gua_cm2 <- gua_cm[common_for_qap, common_for_qap]
nl_2country <- netlm(indo_cm2, gua_cm2)
summary(nl_2country)
# nl_2country2 <- netlm(gua_cm2, indo_cm2)
# summary(nl_2country2)
nlo_2country <- netlogit(indo_cm2, gua_cm2)
summary(nlo_2country)
tm2 <- tm[colnames(gua_cm2), colnames(gua_cm2)] # colnames(indo_cm2) and colnames(gua_cm2) are the same
cm_tm <- array(NA, c(2, length(gua_cm2[1,]),length(gua_cm2[1,])))
cm_tm[1,,] <- gua_cm2
cm_tm[2,,] <- tm2
n2<-netlm(indo_cm2, cm_tm)
summary(n2)
library(network)
library(sna)
library(dplyr)
set.seed(2231)
# 1. coefficient matrix
# Indonesia coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_coefficient_net_weighted.RData")
indo_cm <- cm
# Guatemala coefficient matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net_weighted.RData")
gua_cm <- cm
# 2. text similarity matrix
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/text_matrix.RData")
tm <- m
indo_cm[indo_cm >= -0.5 & indo_cm < 0.5] <- 0
indo_cm[indo_cm <= -0.5 | indo_cm >= 0.5] <- 1
gua_cm[gua_cm >= -0.5 & gua_cm < 0.5] <- 0
gua_cm[gua_cm <= -0.5 | gua_cm >= 0.5] <- 1
tm[tm < 0.2] <- 0
tm[tm >= 0.2] <- 1
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
# get the matrices in same shape and indicator order
# rownames(tm) # the whole list
indo_tm <- tm[rownames(indo_cm), rownames(indo_cm)]
# install.packages("sna")
library(sna)
indo_nl_ct <- netlm(indo_cm, indo_tm)
summary(indo_nl_ct)
# indo_nl_tc <- netlm(indo_tm, indo_cm)
# summary(indo_nl_tc)
indo_nlo_ct <- netlogit(indo_cm, indo_tm)
summary(indo_nlo_ct)
tm2 <- tm[colnames(gua_cm2), colnames(gua_cm2)] # colnames(indo_cm2) and colnames(gua_cm2) are the same
cm_tm <- array(NA, c(2, length(gua_cm2[1,]),length(gua_cm2[1,])))
cm_tm[1,,] <- gua_cm2
cm_tm[2,,] <- tm2
n2<-netlm(indo_cm2, cm_tm)
summary(n2)
library(tidyverse)
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
?lead()
?facet_grid
remove.packages("parsnip")
remove.packages("baguette")
install.packages("parsnip")
install.packages("baguette")
remove.packages("parsnip")
remove.packages("baguette")
remotes::install_github("tidymodels/parsnip")
remove.packages("baguette")
remove.packages("parsnip")
install.packages("parsnip")
install.packages("baguette")
remove.packages("parsnip")
remove.packages("baguette")
remotes::install_github("tidymodels/parsnip")
install.packages("baguette")
remove.packages("parsnip")
remove.packages("baguette")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggnetwork)
# load data and keep all the node pairs statistically significantly related----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
d <- read_csv("indo_coefficients.csv")
p <- read_csv("Indonesia_scaled_correlation_among_indicators_indicator_model_pval.csv") %>% rename(Var1 = X, Var2 = Y, p = `p-unc`)
# d <- read_csv("gua_coefficients.csv")
# p <- read_csv("Guatemala_scaled_correlation_among_indicators_indicator_model_pval.csv") %>% rename(Var1 = X, Var2 = Y, p = `p-unc`)
d2 <- merge(d, p, by = c("Var1", "Var2"))
# change the data format to matrix, to build weighted network
el_weighted <- d2 %>%
filter(Var1 != Var2) %>%
# filter(value >= 0.5 | value <= -0.5) %>%
filter(p <= 0.05) %>%
select(Var1, Var2, value) %>%
arrange(abs(value))
library(igraph)
g2 <- graph.data.frame(el_weighted, directed = FALSE)
m <- get.adjacency(g2, sparse = FALSE, attr='value')
# repeat for the weighted network g2----
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedGuate.csv")
# information: goal, target, indicator
att2 <- info[3:5] %>%
unique() %>%
filter(Indicator %in% colnames(m))
# add all the attributes to the vertex----
vertex_attr(g2, index = att2$Indicator) <- att2  #### Error in as.igraph.vs(graph, index) : Invalid vertex names
V(g2)$name <- V(g2)$Indicator
# inspect the vertexes(nodes) in the network----
vertex_attr(g2)
# width and sign of ties----
E(g2)$coefficient <- el_weighted$value
E(g2)$weight <- abs(E(g2)$coefficient)
E(g2)$sign <- ifelse(E(g2)$weight > 0, "positive",
ifelse(E(g2)$weight < 0, "negative",
ifelse(E(g2)$weight == 0, 0, NA)))
E(g2)$color <- ifelse(E(g2)$coefficient > 0, "green",
ifelse(E(g2)$coefficient < 0, "red",
ifelse(E(g2)$coefficient == 0, 0, NA)))
edge_attr(g2)
# calculate network variables: degree and several kinds of centrality score----
netatt2 <- data.frame(Indicator = V(g2)$Indicator,
degree = igraph::degree(g2), # number of neighbors # numerically equal to degree centrality # here meaningless
strength = strength(g2) # sum of the edge weights of the adjacent edges for each vertex # weight here should be absolute value # somehow it's giving all NAs
# btwn = betweenness(g2, directed = F), # betweenness centrality # DON'T RUN IT!!! r session aborts
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
# eigen = evcent(g2) # eigenvector centrality # all very high, not much help
)
V(g2)$degree <- netatt2$degree
# merge the network attributes with attributes from other data source----
att2 <- merge(att2, netatt2, by='Indicator')
# rename for later analysis with text network----
# cmatrix_d <- matrix_d
cm <- m
catt <- att2
cg <- g2
hex <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Visualizations/goal_hexcodes.csv")
# df <- ggnetwork(cg,layout = with_kk())
# df <- ggnetwork(cg, layout = layout_in_circle(cg))
df <- ggnetwork(cg,layout = layout_nicely(cg))
ggplot(df, aes(x, y, xend = xend, yend = yend)) +
geom_edges(alpha = 0.2, curvature = 0.2, color="seashell3") + # aes(color = color) color="seashell3"
geom_nodes(aes(colour = as.factor(Goal), size = degree), alpha = 0.8) +
scale_color_manual(values = hex$hexcode) +
# geom_nodetext_repel(aes(label = Goal),size = 2) +
# geom_nodetext(aes(label = Target),size = 2) +
# geom_nodetext(aes(label = Indicator),size = 2) +
# geom_nodetext(aes(label = Indicator), size = 2, color = "white") +
theme_blank()
ggplot(df, aes(x, y, xend = xend, yend = yend)) +
geom_edges(alpha = 0.2, curvature = 0.2, color="seashell3") + # aes(color = color) color="seashell3"
geom_nodes(aes(colour = as.factor(Goal), size = degree)) +
scale_color_manual(values = hex$hexcode) +
# geom_nodetext_repel(aes(label = Goal),size = 2) +
# geom_nodetext(aes(label = Target),size = 2) +
# geom_nodetext(aes(label = Indicator),size = 2) +
# geom_nodetext(aes(label = Indicator), size = 2, color = "white") +
theme_blank()
ggplot(df, aes(x, y, xend = xend, yend = yend)) +
geom_edges(alpha = 0.2, curvature = 0.2, color="seashell3") + # aes(color = color) color="seashell3"
geom_nodes(aes(colour = as.factor(Goal), size = degree), alpha = 0.8) +
scale_color_manual(values = hex$hexcode) +
# geom_nodetext_repel(aes(label = Goal),size = 2) +
# geom_nodetext(aes(label = Target),size = 2) +
# geom_nodetext(aes(label = Indicator),size = 2) +
# geom_nodetext(aes(label = Indicator), size = 2, color = "white") +
theme_blank()
ggplot(df, aes(x, y, xend = xend, yend = yend)) +
geom_edges(alpha = 0.2, curvature = 0.2, color="seashell3") + # aes(color = color) color="seashell3"
geom_nodes(aes(colour = as.factor(Goal), size = degree), alpha = 0.8) +
scale_color_manual(values = hex$hexcode) +
# geom_nodetext_repel(aes(label = Goal),size = 2) +
# geom_nodetext(aes(label = Target),size = 2) +
geom_nodetext(aes(label = Indicator),size = 2) +
# geom_nodetext(aes(label = Indicator), size = 2, color = "white") +
theme_blank()
knitr::opts_chunk$set(echo = TRUE,eval=TRUE, message=FALSE, warning=FALSE)
library(readxl)
library(magrittr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(jsonlite)
library(tidyr)
library(tigris)
library(tidytext)
library(textdata)
library(tm)
library(quanteda)
library(rvest)
library(stringr)
library(SnowballC)
library(wordcloud)
library(plotrix)
library(qdapDictionaries)
library(formattable)
library(stringr)
library(DT)
library(network)
library(ggnetwork)
library(igraph)
library(RColorBrewer)
library(randomcoloR)
library(stringi)
library(igraph)
library(ggraph)
library(graphlayouts)
library(visNetwork)
edgelist <- read.csv("~/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/edgelist.csv")
edgelist
indicator_info <- read.csv("~/Documents/GitHub/G5055_Practicum_Project2/Data/Text_Model_Data/indicator_att.csv")
library(stringr)
str_replace_all(indicator_info$Indicator, fixed(" "), "")
Textdata <- datatable(indicator_info, rownames=TRUE, caption=htmltools::tags$caption(style="caption-side: bottom; text-align: center;", "Innovative counties in the U.S."), filter="top", extensions="Buttons", options=list(dom = "Bfrtip", buttons = c("colvis", "copy", "csv", "excel", "pdf", "print")))
Textdata
nodes <- edgelist %>%
select(indicator, related_indicator)
nodes <- data.frame(Indicator = unlist(nodes, use.names = FALSE))
nodes <- distinct(nodes)
str_replace_all(nodes$Indicator, fixed(" "), "")
#nodes$goal <- stri_match_first_regex(nodes$indicator, "(.*?)\\.")[,2]
#nodes$goal <-as.numeric(nodes$goal)
nodes<-merge(x=nodes,y=indicator_info,by="Indicator",all.x=TRUE)
g<-graph_from_data_frame(edgelist, directed=FALSE, vertices=nodes)
in_degree<-degree(g, mode="in")
in_degree<-as.data.frame(in_degree)
in_degree <- cbind(rownames(in_degree), in_degree)
rownames(in_degree) <- NULL
colnames(in_degree) <- c("Indicator","in_degree")
str_replace_all(in_degree$Indicator, fixed(" "), "")
nodes<-merge(x=nodes,y=in_degree,by="Indicator",all.x=TRUE)
nodes<-nodes %>%
select(Indicator, Goal, Indicator_title, in_degree)
nodes
g<-graph_from_data_frame(edgelist, directed=FALSE, vertices=nodes)
#Add attributes
E(g)$weight<-E(g)$similarity_score
V(g)$in_degree<-degree(g, mode="in")
colrs<-c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")
V(g)$color<-colrs[V(g)$Goal]
#Plot graph
plot(g, vertex.label=NA, edge.color="gray77", vertex.color=V(g)$color, vertex.size=V(g)$in_degree, edge.width=E(g)$weight*10, layout=layout_nicely(g))
plot(g, vertex.label.color="black", vertex.label.cex=2.5, edge.color="gray77", vertex.color=V(g)$color, vertex.size=V(g)$in_degree, edge.width=E(g)$weight*10, layout=layout_nicely(g))
#legend(x=-11, y=-11, c("Goal 1","Goal 2","Goal 3","Goal 4","Goal 5","Goal 6","Goal 7","Goal 8","Goal 9","Goal 10","Goal 11", "Goal 12","Goal 13", "Goal 14", "Goal 15", "Goal 16", "Goal 17"), pch=20, col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
vis.nodes <- nodes
vis.links <- edgelist
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- FALSE # Nodes will drop shadow
vis.nodes$title  <- paste(vis.nodes$Indicator,vis.nodes$Indicator_title) # Text on click
vis.nodes$label  <- vis.nodes$Indicator # Node label
vis.nodes$size   <- vis.nodes$in_degree*10 # Node size
#vis.nodes$group <- vis.nodes$Goal
#vis.nodes$borderWidth <- 1 # Node border width
vis.nodes$color.background <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
vis.nodes$color.border <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
vis.links$width <- vis.links$similarity_score*100 # line width
vis.links$color <- "gray"    # line color
#vis.links$arrows <- "middle" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
vis.links$shadow <- FALSE
visnet<-visNetwork(vis.nodes,vis.links, height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
visSave(visnet, file = "Text Network Model.html")
？visNetwork
?visNetwork
visnet <- visNetwork(vis.nodes, edges = vis.links, height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
visSave(visnet, file = "Text Network Model.html")
#visLegend(main="Legend",position="right", ncol=1)
visnet
visnet <- visNetwork(vis.nodes, vis.links) %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
visnet <- visNetwork(vis.nodes, vis.links, height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
View(edgelist)
edgelist
View(edgelist)
edgelist %>% rename(from = indicator, to = related_indicator)
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- FALSE # Nodes will drop shadow
vis.nodes$title  <- paste(vis.nodes$Indicator,vis.nodes$Indicator_title) # Text on click
vis.nodes$label  <- vis.nodes$Indicator # Node label
vis.nodes$size   <- vis.nodes$in_degree*10 # Node size
#vis.nodes$group <- vis.nodes$Goal
#vis.nodes$borderWidth <- 1 # Node border width
vis.nodes$color.background <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
vis.nodes$color.border <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
vis.links$width <- vis.links$similarity_score*100 # line width
vis.links <- edgelist
vis.nodes <- nodes
edgelist %>% rename(from = indicator, to = related_indicator)
vis.links <- edgelist
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- FALSE # Nodes will drop shadow
vis.nodes$title  <- paste(vis.nodes$Indicator,vis.nodes$Indicator_title) # Text on click
vis.nodes$label  <- vis.nodes$Indicator # Node label
vis.nodes$size   <- vis.nodes$in_degree*10 # Node size
#vis.nodes$group <- vis.nodes$Goal
#vis.nodes$borderWidth <- 1 # Node border width
vis.nodes$color.background <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
vis.nodes$color.border <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
vis.links$width <- vis.links$similarity_score*100 # line width
vis.links$color <- "gray"    # line color
#vis.links$arrows <- "middle" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
vis.links$shadow <- FALSE
visnet <- visNetwork(vis.nodes, vis.links, height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
visSave(visnet, file = "Text Network Model.html")
#visLegend(main="Legend",position="right", ncol=1)
visnet
View(edgelist)
vis.nodes <- nodes
vis.links <- edgelist
colnames(vis.links)
colnames(vis.links) <- c("from", "to", "weight")
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- FALSE # Nodes will drop shadow
vis.nodes$title  <- paste(vis.nodes$Indicator,vis.nodes$Indicator_title) # Text on click
vis.nodes$label  <- vis.nodes$Indicator # Node label
vis.nodes$size   <- vis.nodes$in_degree*10 # Node size
#vis.nodes$group <- vis.nodes$Goal
#vis.nodes$borderWidth <- 1 # Node border width
vis.nodes$color.background <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
vis.links$width <- vis.links$similarity_score*100 # line width
vis.links$color <- "gray"    # line color
#vis.links$arrows <- "middle" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
vis.links$shadow <- FALSE
visnet <- visNetwork(vis.nodes, vis.links, height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
vis.links
View(vis.links)
vis.links <- edgelistx
vis.nodes <- nodes
vis.links <- edgelist
colnames(vis.links) <- c("from", "to", "weight")
View(vis.links)
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- FALSE # Nodes will drop shadow
vis.nodes$title  <- paste(vis.nodes$Indicator,vis.nodes$Indicator_title) # Text on click
vis.nodes$label  <- vis.nodes$Indicator # Node label
vis.nodes$size   <- vis.nodes$in_degree*10 # Node size
#vis.nodes$group <- vis.nodes$Goal
#vis.nodes$borderWidth <- 1 # Node border width
vis.nodes$color.background <- c("#ea1d2d", "#d19f2a","#2d9a47", "#c22033","#ef412a", "#00add9", "#fdb714", "#8f1838", "#f36e24", "#e01a83", "#f99d25", "#cd8b2a", "#48773c", "#007dbb", "#40ae49",  "#00558a", "#1a3668")[vis.nodes$Goal]
visnet <- visNetwork(vis.nodes, vis.links, height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
visnet <- visNetwork(vis.nodes, vis.links[1,2], height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
visnet <- visNetwork(vis.nodes, vis.links[-3], height = "700px", width = "100%", main="Social Network Model", submain="Indonesia",footer= "UN SDG Indicator Database") %>%
visOptions(selectedBy = "Goal",
highlightNearest = TRUE,
nodesIdSelection = TRUE) #%>%
#visLegend(main="Legend",position="right", ncol=1)
visnet
