# save attribute table----
write_csv(catt, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_attributes.csv")
library(igraph)
library(igraph)
library(dplyr)
library(readr)
library(igraph)
library(dplyr)
library(readr)
# load data and keep only the node pairs that are related----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
d <- read_csv("indo_coefficients.csv")
# build an unweighted network base (cutoff score = 0.5)----
el <- d %>%
filter(Var1 != Var2) %>%
filter(value >= 0.5) %>%
select(Var1, Var2)
g <- graph.edgelist(as.matrix(el), directed = FALSE)
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# information: goal, target, indicator
att <- info[3:5] %>%
unique() %>%
filter((Indicator %in% el$Var1) | (Indicator %in% el$Var2))
# add all the attributes to the vertex----
vertex_attr(g, index = att$Indicator) <- att
# inspect the vertexes(nodes) in the network----
V(g)$Indicator
# calculate network variables: degree and several kinds of centrality score----
netatt <- data.frame(Indicator = V(g)$Indicator,
degree = degree(g), # number of neighbors # numerically equal to degree centrality
btwn = betweenness(g, directed = F), # betweenness centrality
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
eigen = evcent(g) # eigenvector centrality
)[1:5]
# merge the network attributes with attributes from other data source----
att <- merge(att, netatt, by='Indicator')
# rename for later analysis with text network----
catt <- att
cd <- d
cel <- el
cg <- g
# save attribute table----
write_csv(catt, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/indo_attributes.csv")
# load data and keep only the node pairs that are related----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
d <- read_csv("gua_coefficients.csv")
# build an unweighted network base (cutoff score = 0.5)----
el <- d %>%
filter(Var1 != Var2) %>%
filter(value >= 0.5) %>%
select(Var1, Var2)
g <- graph.edgelist(as.matrix(el), directed = FALSE)
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
# information: goal, target, indicator
att <- info[3:5] %>%
unique() %>%
filter((Indicator %in% el$Var1) | (Indicator %in% el$Var2))
# add all the attributes to the vertex----
vertex_attr(g, index = att$Indicator) <- att
# inspect the vertexes(nodes) in the network----
V(g)$Indicator
# calculate network variables: degree and several kinds of centrality score----
netatt <- data.frame(Indicator = V(g)$Indicator,
degree = degree(g), # number of neighbors # numerically equal to degree centrality
btwn = betweenness(g, directed = F), # betweenness centrality
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
eigen = evcent(g) # eigenvector centrality
)[1:5]
# merge the network attributes with attributes from other data source----
att <- merge(att, netatt, by='Indicator')
# rename for later analysis with text network----
catt <- att
cd <- d
cel <- el
# calculate network variables: degree and several kinds of centrality score----
netatt <- data.frame(Indicator = V(g)$Indicator,
degree = degree(g), # number of neighbors # numerically equal to degree centrality
btwn = betweenness(g, directed = F), # betweenness centrality
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
eigen = evcent(g) # eigenvector centrality
)[1:5]
# calculate network variables: degree and several kinds of centrality score----
netatt <- data.frame(Indicator = V(g)$Indicator,
degree = degree(g), # number of neighbors # numerically equal to degree centrality
# btwn = betweenness(g, directed = F), # betweenness centrality
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
eigen = evcent(g) # eigenvector centrality
)[1:5]
library(igraph)
library(dplyr)
library(readr)
# load data and keep only the node pairs that are related----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
d <- read_csv("gua_coefficients.csv")
# build an unweighted network base (cutoff score = 0.5)----
el <- d %>%
filter(Var1 != Var2) %>%
filter(value >= 0.5) %>%
select(Var1, Var2)
g <- graph.edgelist(as.matrix(el), directed = FALSE)
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedIndo.csv")
View(info)
# information: goal, target, indicator
att <- info[3:5] %>%
unique() %>%
filter((Indicator %in% el$Var1) | (Indicator %in% el$Var2))
View(att)
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedGua.csv")
library(igraph)
library(dplyr)
library(readr)
# load data and keep only the node pairs that are related----
setwd("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/PCA_results")
d <- read_csv("gua_coefficients.csv")
# build an unweighted network base (cutoff score = 0.5)----
el <- d %>%
filter(Var1 != Var2) %>%
filter(value >= 0.5) %>%
select(Var1, Var2)
g <- graph.edgelist(as.matrix(el), directed = FALSE)
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedGua.csv")
# some attributes----
info <- read_csv("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/processedGuate.csv")
# information: goal, target, indicator
att <- info[3:5] %>%
unique() %>%
filter((Indicator %in% el$Var1) | (Indicator %in% el$Var2))
# add all the attributes to the vertex----
vertex_attr(g, index = att$Indicator) <- att
# inspect the vertexes(nodes) in the network----
V(g)$Indicator
# calculate network variables: degree and several kinds of centrality score----
netatt <- data.frame(Indicator = V(g)$Indicator,
degree = degree(g), # number of neighbors # numerically equal to degree centrality
btwn = betweenness(g, directed = F), # betweenness centrality
# close = closeness(g, mode = c("all")), # closeness centrality not well-defined for disconnected graphs
eigen = evcent(g) # eigenvector centrality
)[1:5]
# merge the network attributes with attributes from other data source----
att <- merge(att, netatt, by='Indicator')
# rename for later analysis with text network----
catt <- att
cd <- d
cel <- el
cg <- g
# save attribute table----
write_csv(catt, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_attributes.csv")
# # save network object in RData format----
# save(cd, cel,cg, catt, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/coefficient_net.RData")
#
# # To load the data again
# load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/coefficient_net.RData")
# save attribute table----
write_csv(catt, "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_attributes.csv")
#
# save network object in RData format----
save(cd, cel,cg, catt, file = "/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net.RData")
# To load the data again
load("/Users/hailey/Documents/GitHub/G5055_Practicum_Project2/Data/coefficient_network/gua_coefficient_net.RData")
